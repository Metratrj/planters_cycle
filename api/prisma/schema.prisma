datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  // Corresponds to the cargo alias created earlier
  provider = "cargo prisma"
  // The location to generate the client. Is relative to the position of the schema
  output   = "../src/prisma.rs"
}

model User {
  id           String         @id @default(uuid()) /// @zod.uuid()
  displayName  String /// @zod.min(2, "Display name must be at least 2 characters long")
  email        String         @unique /// @zod.email("Invalid email address")
  password     String /// @zod.min(8, "Password must be at least 8 characters long").or(z.literal(''))
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  roles        UsersInRoles[]
  PlantHistory PlantHistory[]
}

model Role {
  id        Int            @id @default(autoincrement())
  name      String /// @zod.min(2, "Role name must be at least 2 characters long")
  isDefault Boolean        @default(false)
  users     UsersInRoles[]
}

model UsersInRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String /// @zod.uuid("Invalid user id").optional()
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int /// @zod.min(1, "Role ID needs to be set")
  assignedAt DateTime @default(now())
  assignedBy String /// @zod.uuid("Assigner must be set")

  @@id([userId, roleId])
}

model Plant {
  id           String         @id @default(uuid())
  name         String
  genetic      Genetic        @relation(fields: [geneticId], references: [id])
  geneticId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PlantHistory PlantHistory[]
}

model Genetic {
  id    String  @id @default(uuid())
  name  String
  Plant Plant[]
}

model PlantHistory {
  id        String   @id @default(uuid())
  plant     Plant    @relation(fields: [plantId], references: [id])
  plantId   String
  action    String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}
