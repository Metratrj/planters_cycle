// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) /// @zod.uuid()
  displayName  String /// @zod.min(2, "Display name must be at least 2 characters long")
  email        String         @unique /// @zod.email("Invalid email address")
  password     String /// @zod.min(8, "Password must be at least 8 characters long").or(z.literal(''))
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  roles        UsersInRoles[]
  PlantHistory PlantHistory[]
}

model Role {
  id        Int            @id @default(autoincrement())
  name      String /// @zod.min(2, "Role name must be at least 2 characters long")
  isDefault Boolean        @default(false)
  users     UsersInRoles[]
}

model UsersInRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int /// @zod.min(1, "Role ID needs to be set")
  assignedAt DateTime @default(now())
  assignedBy String /// @zod.uuid("Assigner must be set")

  @@id([userId, roleId])
}

model Plant {
  id           String         @id @default(uuid())
  name         String
  genetic      Genetic        @relation(fields: [geneticId], references: [id])
  geneticId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PlantHistory PlantHistory[]
}

model Genetic {
  id          String  @id @default(uuid())
  name        String
  flower_days Int
  Plant       Plant[]
}

model PlantHistory {
  id        String   @id @default(uuid())
  plant     Plant    @relation(fields: [plantId], references: [id])
  plantId   String
  action    String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}
